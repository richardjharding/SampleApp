@{
    // title - The title of the page which appears in the browser window title. Aim for the title to be less than 70
    //         characters. The site name appears at the end for better SEO.
    ViewBag.Title = "Sprydon Sample";
    // Description - Used by search engines. Aim for more than 160 characters.
    ViewBag.Description = "Sample demo applicaton created by Richard Harding richard@sprydon.com";
    // Author - (Optional) Used by search engines. The author of the page.
    ViewBag.Author = "Richard Harding";
    // Referrer - (Optional) Controls what is sent in the HTTP referrer header when a client navigates from your page
    //            to an external site for increased user privacy and security. See ReferrerMode for more information.
    ViewBag.ReferrerMode = ReferrerMode.OriginWhenCrossOrigin;

    // Add Twitter Card and Open Graph social meta tags so we can customize what happens when our page is shared
    // on these social networks. Note that other social networks like Google+, Pintrest and others also use these.
    // There are dozens of different Twitter Card or Open Graph object types we could add, a different one is added
    // on each page as an example.
    // These helpers make it very easy to add the meta tags. For best performance, see what tags are generated and
    // hand code them yourself instead of using these helpers.
    ViewBag.TwitterCard = new SummaryLargeImageTwitterCard("@RehanSaeedUK");
    ViewBag.OpenGraph = new OpenGraphWebsite(
        ViewBag.Title,
        new OpenGraphImage(Url.AbsoluteContent("~/content/icons/open-graph-1200x630.png")) { Height = 630, Type = ContentType.Png, Width = 1200 })
    {
        Determiner = OpenGraphDeterminer.Blank,
        SiteName = Application.Name
    };
}

<header class="jumbotron">
    <h1>@ViewBag.Title</h1>
    <p class="lead">@ViewBag.Description</p>
</header>

<div class="row">
    <article class="col-md-5" role="article">
        <p>The application consists of 3 main components - this web portal an MVC Web API OData service and an Entity Framework persistance layer</p>
        <p>The Users list page is protected by an Authorisation layer using Identity Server, the same is used to protect the API endpoints</p>
        <p>To login use </p>
        <p>Username: bob</p>
        <p>Password: secret</p>
        <p>Sample users to search for Bowman, Poole, Michaels</p>
    </article>
    <article class="col-md-5" role="article">
        <p>The portal is based on the MVC Boilerplate template which provides a number of best practice defauilts</p>
        <p>When running in debug mode the debug menu shows various diagnostic options</p>
        <p>A test project makes use of Effort to allow the persistance layer to operate in memory avoiding the need to connect to a real database</p>
       
    </article>
</div>

<div class="row">
   
</div>

<div class="row">
    <article class="col-md-4" role="article">
    </article>
    
</div>

<div class="row">
    
</div>

<div class="row">
    <article class="col-md-4" role="article">
       
    </article>
   
</div>